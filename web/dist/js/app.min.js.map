{"version":3,"sources":["test.js","applications/miit-team-home-page.js","components/create-team.js","utils.js","app.concat.js"],"names":["React","window","MiitComponents","createClass","displayName","render","createElement","this","props","name","MiitTeamHomePage","CreateTeam","getInitialState","placeholder","email","MiitTranslator","get","team","submit","errors","getDefaultErrors","missing_email","missing_team","missing_terms","invalid_email","invalid_team","handleSubmit","e","preventDefault","findDOMNode","refs","value","trim","terms","checked","MiitUtils","validator","setState","ajax","crsf","token","send","registration_type[user][email]","registration_type[team][name]","registration_type[terms]","registration_type[_token]","data","console","log","cx","addons","classSet","classes_email","invalid","state","classes_team","classes_terms","class","onSubmit","type","className","ref","createXMLHTTPObject","xmlhttp","i","XMLHttpFactories","length","RegexEmail","RegexTeamName","validatorGenerator","re","test","generatesParamsString","params","encodedParams","key","param","encodeURIComponent","push","join","XMLHttpRequest","ActiveXObject","sendRequest","url","postData","cb","req","method","open","setRequestHeader","onreadystatechange","readyState","status","result","JSON","parse","responseText","getCrsf","intention"],"mappings":"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","file":"app.min.js","sourcesContent":["var HelloWorld = React.createClass({displayName: \"HelloWorld\",\n  render: function() {\n    return React.createElement(\"div\", null, \"Hello \", this.props.name);\n  }\n});\n//# sourceMappingURL=test.js.map","window.MiitTeamHomePage = React.createClass({displayName: \"MiitTeamHomePage\",\n  render: function() {\n    return React.createElement(\"div\", null, \"Hello from Team\");\n  }\n});\n//# sourceMappingURL=../applications/miit-team-home-page.js.map","MiitComponents.CreateTeam = React.createClass({displayName: \"CreateTeam\",\n\n    getInitialState: function() {\n\n        return {\n            placeholder: {\n                email: MiitTranslator.get('placeholder.your.email', 'inputs'),\n                team:  MiitTranslator.get('placeholder.team.name', 'inputs')\n            },\n            submit: MiitTranslator.get('submit.create.team', 'inputs'),\n            errors: this.getDefaultErrors()\n        }\n    },\n\n    getDefaultErrors: function() {\n        return {\n            missing_email: false,\n            missing_team:  false,\n            missing_terms: false,\n            invalid_email: false,\n            invalid_team:  false\n        };\n    },\n\n    handleSubmit: function(e) {\n        e.preventDefault();\n\n        var email = React.findDOMNode(this.refs.email).value.trim();\n        var team  = React.findDOMNode(this.refs.team).value.trim();\n        var terms = React.findDOMNode(this.refs.terms).checked;\n        \n        // Check if there is data\n        if (!email || !team || !terms) {\n            this.setState({ errors: {\n                missing_email: !email,\n                missing_team:  !team,\n                missing_terms: !terms\n            }});\n            return;\n        }\n\n        // Check if this is a correct email\n        if(!MiitUtils.validator.email(email)) {\n            this.setState({ errors: {\n                invalid_email: true\n            }});\n            return;\n        }\n\n        // Check if this is a correct team name\n        if(!MiitUtils.validator.team(team)) {\n            this.setState({ errors: {\n                invalid_team: true\n            }});\n            return;\n        }\n\n        this.setState({\n            errors: this.getDefaultErrors()\n        });\n\n        // Request for CRSF\n        MiitUtils.ajax.crsf('registration', function(token) {\n\n            // Register the user\n            MiitUtils.ajax.send('/register', {\n                'registration_type[user][email]': email,\n                'registration_type[team][name]':  team,\n                'registration_type[terms]':       terms,\n                'registration_type[_token]':      token\n            }, function(data) {\n                console.log(data);    \n            });\n        });\n\n        return;\n    },\n\n    render: function() {\n        var cx = React.addons.classSet;\n\n        var classes_email = cx({\n            'invalid': this.state.errors.missing_email ||\n                       this.state.errors.invalid_email\n        });\n\n        var classes_team = cx({\n            'invalid':  this.state.errors.missing_team ||\n                        this.state.errors.invalid_team\n        });\n\n        var classes_terms = cx({\n            'invalid': this.state.errors.missing_terms\n        });\n\n        return (\n            React.createElement(\"form\", {class: \"miit-component create-team\", onSubmit: this.handleSubmit}, \n                React.createElement(\"div\", null, \n                    React.createElement(\"input\", {type: \"text\", className: classes_email, placeholder: this.state.placeholder.email, ref: \"email\"}), \n                    React.createElement(\"input\", {type: \"text\", className: classes_team, placeholder: this.state.placeholder.team, ref: \"team\"}), \n                    React.createElement(\"input\", {type: \"checkbox\", className: classes_terms, ref: \"terms\"}), \n                    React.createElement(\"input\", {type: \"submit\", value: this.state.submit})\n                )\n            )\n        );\n    }\n});\n//# sourceMappingURL=../components/create-team.js.map","var MiitUtils = (function() {\n    \"use strict\";\n    /**\n     * Validator part\n     */\n\n    // Regex for email\n    var RegexEmail    = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i;\n\n    // Regex for team name\n    var RegexTeamName = /^[a-z0-9]{4,}$/i;\n\n    // Generate the validator for a regex\n    var validatorGenerator = function(re) {\n        // Return the validation function\n        return function(value) {\n            // Test the regex\n            return re.test(value);\n        };\n    };\n\n    /**\n     * Ajax part\n     */\n\n    // export js object to application/x-www-form-urlencoded\n    var generatesParamsString = function(params) {\n        var encodedParams = [];\n\n        for(var key in params) {\n            var value = params[key];\n            var param = encodeURIComponent(key) + '=' + encodeURIComponent(value);\n\n            encodedParams.push(param);\n        }\n\n        return encodedParams.join('&');\n    };\n\n    // get the list of HttpRequestHandlers\n    var XMLHttpFactories = [\n        function () {return new XMLHttpRequest()},\n        function () {return new ActiveXObject('Msxml2.XMLHTTP')},\n        function () {return new ActiveXObject('Msxml3.XMLHTTP')},\n        function () {return new ActiveXObject('Microsoft.XMLHTTP')}\n    ];\n\n    // Generator of HttpRequestHandler\n    function createXMLHTTPObject() {\n        var xmlhttp = false;\n        for (var i=0;i<XMLHttpFactories.length;i++) {\n            try {\n                xmlhttp = XMLHttpFactories[i]();\n            }\n            catch (e) {\n                continue;\n            }\n            break;\n        }\n        return xmlhttp;\n    }\n\n    // Send request method\n    var sendRequest = function(url, postData, cb) {\n        var req = createXMLHTTPObject();\n\n        if(!req) return;\n\n        if(typeof postData === 'function') {\n            cb       = postData;\n            postData = null;\n        }\n        \n        var method = (postData) ? 'POST' : 'GET';\n        \n        req.open(method, url, true);\n        \n        if(postData) {\n            req.setRequestHeader('Content-type','application/x-www-form-urlencoded');\n        }\n\n        req.onreadystatechange = function () {\n            if (req.readyState != 4) return;\n            if (req.status != 200 && req.status != 304) {\n                return;\n            }\n\n            var result;\n\n            try {\n                result = JSON.parse(req.responseText);\n            } catch(e) { }\n\n            if(typeof cb === 'function') {\n                cb(result);\n            }\n        };\n        \n        if (req.readyState == 4) return;\n\n        req.send(generatesParamsString(postData));\n    }\n\n    // Get CRSF token to validate Form.\n    var getCrsf = function(intention, cb) {\n        if(typeof intention === 'function') {\n            cb        = intention;\n            intention = null;\n        }\n\n        var url = '/_crsftoken/' + (intention || '');\n\n        sendRequest(url, function(data) {\n            if(data       &&\n               data.token &&\n               typeof cb === 'function') {\n\n                cb(data.token);\n            }\n        });\n    }\n\n    // Return the public object\n    return {\n        ajax: {\n            send: sendRequest,\n            crsf: getCrsf\n        },\n\n        validator: {\n            email: validatorGenerator(RegexEmail),\n            team:  validatorGenerator(RegexTeamName)\n        }\n    };\n})();",null],"sourceRoot":"/source/"}